import math
import sympy as sy
import numpy as np
from Anya.funcs import count_included_points as count_pts

# s = """56,7 60,5 47,5 48,5 64,7 65,8 91,3 83,0 48,5 64,8
# 16,5 27,5 51,5 28,0 52,5 50,5 49,0 55,5 61,5 55,2
# 81,5 69,5 21,8 61,5 53,0 59,5 69,3 73,5 85,0 41,0
# 56,4 55,3 56,2 75,5 36,5 38,5 26,9 76,9 58,5 63,7
# 30,3 56,5 77,7 29,5 54,3 53,9 57,3 33,5 84,8 63,1
# 57,8 65,1 34,9 60,9 58,2 55,3 55,9 53,9 64,0 48,9
# 40,0 56, 5 33,5 46,2 64,0 54,3 24,9 44,9 42,1 44,1
# 56,0 33,2 60,5 75,1 35,8 69,2 37,7 50,5 50,3 75,6
# 52,8 83,2 43,6 75,7 45,8 36,5 49,5 96,5 52,6 69,5
# 36,5 50,3 71,3 28,5 45,3 48,8 71,3 24,3 47,5 36,5"""

s = """\
66,7 70,5 57,5 58,5 74,7 75,8 99,9 58,5 93,0 74,8
26,7 37,5 61,5 38,0 62,5 60,5 59,0 71,5 65,5 65,2
91,5 79,5 31,8 71,5 63,0 69,5 79,3 95,0 83,5 51,0
66,4 65,3 66,2 85,5 46,5 48,5 36,9 68,5 86,9 73,7
40,3 66,5 87,7 39,5 64,3 63,9 67,3 94,8 43,5 73,1
67,8 75,1 44,9 58,9 70,9 68,2 65,3 65,9 74,0 63,9
50,0 66,5 43,5 56,2 74,0 64,3 34,9 52,1 44,9 54,1
66,0 43,2 70,5 85,1 45,8 79,2 47,7 60,3 60,5 85,6
62,8 93,2 53,6 85,7 55,8 46,5 59,5 62,6 92,8 79,5
46,5 60,3 81,3 38,5 55,3 58,8 81,3 57,5 34,3 46,5
"""

l = s.replace("\n", " ").replace(", ", ".").replace(",", ".").split()
l = list(map(float, l))

if len(l) != 100:
    raise Exception("IncorrectData")

l = np.array(l)
l.sort()

R = l.max() - l.min()
n_len = l.shape[0]
L = round(R / (1 + 3.322*math.log10(100)))
xmin = l.min()
xmax = l.max()

x0 = xmin - L / 2
xi = xmax + L / 2
intervals = np.arange(x0, xi, 10)
intervals = intervals.tolist()

if intervals[-1] != xi:
    intervals = intervals[:-1]

intervals = list(map(lambda x: (x, x+L), intervals))

intervals[-1] = intervals[-1][0], xi

int_copy = intervals.copy()

intervals = list(map(lambda x: str(x), intervals))
intervals = list(map(lambda x: "[" + x[1:], intervals))
s_intervals = "; ".join(intervals).replace(",", ";")

ni = [count_pts(i, l) for i in int_copy]
n = [100 for i in int_copy]
wi = [ni[i]/n[i] for i in range(len(int_copy))]

mmat_pic_1 = np.array([intervals, ni, n, wi])

xi_for_pic_2 = [(i[0] + i[1])/2 for i in int_copy]
xi_for_pic_2[-1] = round(xi_for_pic_2[-1], 3)

mmat_pic_2 = np.array([xi_for_pic_2, ni, n, wi])
s_mmat_2 = np.array([xi_for_pic_2, ni, n, wi], dtype=str)

out = f"""\
Решение:
1) определим максимальное и минимальное значение имеющихся значений: х_min = {l.min()}; х_max = {l.max()}
2) Выстроим в порядке возрастания, имеющиеся у нас значения (табл.2)
{l.reshape(10,10)}

3) Определим размах R: R = х_max - х-min = {l.max()} - {l.min()} = {l.max() - l.min()}
4) l = R / (1 + 3.322*lg({n_len})) = {R} / (1 + 3.322*{math.log10(100)}) = {R / (1 + 3.322*math.log10(100))} ~ \
{round(R / (1 + 3.322*math.log10(100)))}

Нижняя граница х0 = хmin - L / 2 = {xmin} - {L} / 2 = {xmin - L / 2};
Верхняя граница хi = хmax + L / 2 = {xmax} + {L} / 2 = {xmax + L / 2},
следовательно, у нас имеются интервалы: 
{s_intervals}

5) wi = ni / n

Названия строк по номерам (вписать в таблице)
1: xi
2: ni
3: n
4: wi

{mmat_pic_1}

Рис. 1. Гистограмма относительных частот

Перейдем от составленного интервального распределения к точечному выборочному распределению, взяв за значение признака \
середины частичных интервалов. Построим полигон относительных частот и найдем эмпирическую функцию распределения, построим ее график:

Названия строк по номерам (вписать в таблице)
1: xi
2: ni
3: n
4: wi

{s_mmat_2}

Рис. 2. График интервального распределения


"""
# TODO Дописать остальные пункты, сделать графики.

print(out)
